const SCRIPT_ID = ["javascript", "start", "auto", "finalAuto", "autoCategories", "manual", "category",
  "editCategory", "addClass", "semester", "gpaCalc", "seth_img", "langSelect", "examGrade", "semesterGrade",
  "setLangForm", "intro", "footer", "translateMotto"];
const LANGUAGES = ["English", "Espa√±ol", "Portugu√™s", "Fran√ßais", "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", "ÿßÿ±ÿØŸà",
"‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", "ŸÅÿßÿ±ÿ≥€å", "·êÉ·ìÑ·íÉ·ëé·ëê·ë¶", "Latinum", "‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§Æ‡•ç"];
const LANG_CODES = ["en", "es", "pt", "fr", "hi", "ur", "bn", "fa", "iu", "la", "sa"];
const RTL_LANG = ["ur", "fa"];

const MY_EMAIL = "harysdalvi@gmail.com";

var usedLangs = ["en"];

var currentLangData;
function changeLanguage(l) {
  lang = l;
  if (usedLangs.indexOf(l) == -1) {
    usedLangs.push(l);
    var script = document.createElement('script');
    script.src = "lang/"+l+".js";
    document.body.appendChild(script);
  } else {
    languageLoaded(l);
  }
}
function languageLoaded(l) {
  currentLangData = langData[l];
  setReference();
  var dialect = setDialect();
  var d = currentLangData;
  document.setLanguage.language.value = lang;
  document.getElementById("javascript").innerHTML = d.jsSuccess;
  langHTML("langSelect", "setLang");
  langHTML("welcome");
  if (document.getElementById("manualInput").style.display == "block")
    langHTML("autoCalculation", "newClass");
  else
    langHTML("autoCalculation", "quarterGrades");
  langHTML("help");
  document.getElementById("intro").innerHTML = langReplace("intro", ["$EMAIL"],
    ['<a href="mailto:'+MY_EMAIL+'?subject=Grade calculator issue">'+MY_EMAIL+'</a>']);
  langHTML("semGradesButton");
  langHTML("gpaCalcButton");
  langHTML("manualBack", "back");
  langHTML("categoryBack", "back");
  langHTML("autoBack", "back");
  langHTML("faqBack", "back");
  langHTML("semesterBack", "back");
  langHTML("gpaBack", "back");
  langHTML("mailBack", "back");
  langHTML("newCatButton");
  langHTML("catInstruct");
  langHTML("catName");
  langHTML("catPercent");
  langHTML("createCat");
  langHTML("doneEditCat", "done");
  langHTML("editInstruct");
  langHTML("editLetter", "letterGrade");
  langHTML("editLetter2", "letterGrade");
  langHTML("addAssignmentButton", "addAssignment");
  langHTML("delAssignmentButton", "deleteAssignment");
  langHTML("creditCathy");
  langHTML("whatNeed");
  langHTML("desiredGrade");
  langHTML("numPointsWorth");
  langHTML("calcRequiredButton");
  langHTML("changeWeightButton");
  langHTML("deleteCatButton");
  document.editCategory.letter.options[0].innerHTML = "-- " + d.selectLetter + " --";
  document.editCategory.letter2.options[0].innerHTML = "-- " + d.selectLetter + " --";
  langHTML("copyGradesInstruct");
  langHTML("mobileCopyInstruct");
  langHTML("pasteGradesInstruct");
  langHTML("autoNext", "next");
  langHTML("superAlgorithm");
  langHTML("dontWorry");
  langHTML("shouldContinue");
  langHTML("rampalButton");
  langHTML("manualButton");
  langHTML("autoContinue", "continue");
  document.getElementById("selClass").innerHTML = d.selClass + " <img id=\"seth_img\" src=\"SETH.JPG\">";
  document.classes.class.options[0].innerHTML = "-- " + d.selClassOption + " --";
  document.classes.class.options[1].innerHTML = d.addClassOption;
  langHTML("sethClassInstruct");
  langHTML("pointSystemInstruct");
  langHTML("pointSystemInstruct2");
  langHTML("nameOfClass");
  langHTML("enterCatNames");
  langHTML("enterWeights");
  langHTML("enterNotes")
  langHTML("sendMailButton", "submit");
  langHTML("minExam");
  langHTML("wantAtLeast");
  calculateSemester();
  document.getElementById("semesterGrade").innerHTML += "<br>" + d.selectAbove;
  langHTML("semWithExam");
  calculateExam();
  document.getElementById("examGrade").innerHTML += "<br>" + d.selectAbove;
  document.modifyCredit.numCredits.options[0].innerHTML = d.semester;
  document.modifyCredit.numCredits.options[1].innerHTML = d.quarter;
  document.addCredit.numCredits.options[0].innerHTML = d.semester;
  document.addCredit.numCredits.options[1].innerHTML = d.quarter;
  langHTML("ahsWeighted");
  langHTML("5scale");
  langHTML("4scale");
  langHTML("ritvikCalc");
  langHTML("ritvikHonor");
  langHTML("editCreditButton", "apply");
  langHTML("deleteCreditButton", "delete");
  langHTML("clearDataExp");
  langHTML("clearDataButton");
  langHTML("getCreditButton");
  langHTML("addCreditButton", "add");
  langHTML("modifyCreditHeading");
  langHTML("creditNum");
  langHTML("q13sem", "quarter13");
  langHTML("q13exam", "quarter13");
  langHTML("q24sem", "quarter24");
  langHTML("q24exam", "quarter24");
  langHTML("semExam", "examGrade");
  langHTML("announcements");
  langHTML("footer");
  langHTML("pronunciation");
  langHTML("translateMotto");
  document.exam.exam.options[12].innerHTML = d.noExam;
  document.getElementById("manualInput").innerHTML = d.edit;
  document.classes.search.placeholder = d.search;
  for (var i = 0; i < SCRIPT_ID.length; i++) {
    if (l == "ur") {
      document.getElementById(SCRIPT_ID[i]).style.direction = "rtl";
      document.getElementById(SCRIPT_ID[i]).style.fontFamily = 'nastaliq';
    } else if (["hi"].indexOf(l) != -1) {
      document.getElementById(SCRIPT_ID[i]).style.direction = "";
      document.getElementById(SCRIPT_ID[i]).style.fontFamily = 'devanagari';
    } else if (l == "bn") {
      document.getElementById(SCRIPT_ID[i]).style.direction = "";
      document.getElementById(SCRIPT_ID[i]).style.fontFamily = 'bengali';
    } else if (l == "sa") {
      document.getElementById(SCRIPT_ID[i]).style.direction = "";
      document.getElementById(SCRIPT_ID[i]).style.fontFamily = '"Times New Roman", "Devanagari MT", devanagari, tibetan, balinese';
    } else if (l == "fa") {
      document.getElementById(SCRIPT_ID[i]).style.direction = "rtl";
      document.getElementById(SCRIPT_ID[i]).style.fontFamily = "";
    } else if (l == "en" && dialect == "ASCII") {
      document.getElementById(SCRIPT_ID[i]).style.direction = "";
      document.getElementById(SCRIPT_ID[i]).style.fontFamily = '"Courier", monospace';
    } else {
      document.getElementById(SCRIPT_ID[i]).style.direction = "";
      document.getElementById(SCRIPT_ID[i]).style.fontFamily = "";
    }
  }
  for (var i = 0; i < LANGUAGES.length; i++) {
    if (document.setLanguage.language.options[i].value == l) {
      document.setLanguage.language.options[i].innerHTML = LANGUAGES[i];
      document.getElementsByClassName("button")[i].classList.add("selected");
      if (l == "en")
        document.title = "AHS Grade Calculator";
      else if (l == "la")
        document.title = "AHS Grade Calculator Latinus"
      else if (l == "sa") {
        document.title = "AHS Grade Calculator " + d["sanskrit"];
        document.setLanguage.language.options[i].innerHTML = d["sanskrit"];
      } else
        document.title = "AHS Grade Calculator " + d.languages[i];
    } else {
      document.getElementsByClassName("button")[i].classList.remove("selected");
      if (RTL_LANG.indexOf(document.setLanguage.language.options[i].value) != -1) {
        if (RTL_LANG.indexOf(lang) == -1) {
          document.setLanguage.language.options[i].innerHTML = "&#x2067;" + LANGUAGES[i] + "&#x2069; &mdash; " +
            d.languages[i];
        } else {
          document.setLanguage.language.options[i].innerHTML = "&#x2067;" + LANGUAGES[i] + "&#x2069; &mdash; " +
            "&#x2067;" + d.languages[i] + "&#x2069;";
        }
      } else {
        document.setLanguage.language.options[i].innerHTML = LANGUAGES[i] + " &mdash; " +
          d.languages[i];
      }
    }
  }
  var classicLangs = {"en": "ang la", "es": "la", "pt": "la", "hi": "sa fa",
  "ur": "sa fa", "fa": "peo ar", "la": "grk", "sa": "", "fr": "la", "bn": "sa",
  "iu": "en fr"}[lang].split(" ");
  if (l == "en" && dialect == "Anglish")
    classicLangs = ["ang"];
  if (l == "en" && dialect == "ASCII")
    classicLangs = [];
  var mottos = {"":"","la": "Ab Dolore Nvmerorvm ad Pacem", "ang": "·ö†·ö±·ö™·õó·õ´·ö±·õÅ·õó·ö™·õ´·õã·ö™·ö±·öæ·õñ·õã·õã·õñ·õ´·õè·ö©·õ´·ö†·ö±·õÅ·ö¶·õñ",
  "sa": "‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ‡§®‡§æ‡§Ç&#8203;‡§™‡•Ä‡§°‡§æ‡§Ø‡§æ‡§É&#8203;‡§∂‡§æ‡§®‡•ç‡§§‡§ø‡§Æ‡•ç", "fa": "ÿßÿ≤ ÿØÿ±ÿØ ÿ¥ŸÖÿßÿ±‚ÄåŸáÿß ÿ®Ÿá ÿßŸìÿ±ÿßŸÖ",
  "ar": "ŸÖŸêŸÜŸí ÿ£ŸéŸÑŸéŸÖŸê ÿßŸÑŸíÿ£Ÿéÿ±ŸíŸÇŸéÿßŸÖŸê ÿ•ŸêŸÑŸéŸâ ÿßŸÑÿ≥ŸëŸéŸÑŸéÿßŸÖŸê", "grk": "·ºòŒ∫ œÑ·øÜœÇ ŒªœçœÄŒ∑œÇ œÑ·ø∂ŒΩ ·ºÄœÅŒπŒ∏Œº·ø∂ŒΩ œÄœÅœåœÇ œÑ·Ω¥ŒΩ Œµ·º∞œÅŒÆŒΩŒ∑ŒΩ",
  "peo": "êèÉêé®êé†êèê&#8203;êéÆêé°êé±êé°êé¥êé†êé∂êèê&#8203;êé≠êéºêé¢êé•êé†êèê&#8203;êèÅêé°êéπêé†êé´êé°êé∂",
  "en": "From the pain of the numbers to peace", "fr": "De la douleur des nombres √† la paix"};
  document.getElementById("motto").innerHTML = "";
  for (var i = 0; i < classicLangs.length; i++) {
    document.getElementById("motto").innerHTML += '<p lang="'+classicLangs[i]+'">'
    + mottos[classicLangs[i]] + '</p>';
  }
  document.getElementsByTagName("html")[0].lang = l;
  updateGpa();
  updateCategories();
}
function languageSelect() {
  changeLanguage(document.setLanguage.language.value);
}
function langHTML(id, key=null) {
  var el = document.getElementById(id);
  if (key == null)
    key = id;
  if (typeof currentLangData[key] != "undefined") {
    el.innerHTML = currentLangData[key];
    el.lang = lang;
  } else {
    el.innerHTML = langData["en"][key];
    el.lang = "en";
  }
  if (RTL_LANG.indexOf(el.lang) != -1) {
    el.style.direction = "rtl";
  } else {
    el.style.direction = "ltr";
  }
}
function langReplace(key, codes, values) {
  var str = currentLangData[key];
  for (var i = 0; i < codes.length; i++)
    str = str.replace(codes[i], "" + values[i]);
  return str;
}

function setReference() {
  var refer, rForm;
  currentLangData = JSON.parse(JSON.stringify(langData[lang])); // make a copy
  if (["hi", "ur"].indexOf(lang) == -1) {
    document["refer_hi-ur"].style.display = "none";
  } else {
    document["refer_hi-ur"].style.display = "";
    rForm = document["refer_hi-ur"]["r_hi-ur"];
    refer = rForm.value;
    var pronoun;
    switch(lang) {
      case "ur": switch(refer) {
        case "mf0":
        case "ff0":
          pronoun = "ÿ™ŸÖ";
          break;
        default:
          pronoun = "ÿßŸìŸæ";
      }
      document.getElementById("refer_hi-ur_friend").innerHTML = {"ÿßŸìŸæ": "ÿßŸìŸæ ⁄©Ÿà", "ÿ™ŸÖ": "ÿ™ŸÖ€Å€å⁄∫"}[pronoun] + " ⁄©€åÿ≥€í ÿ®ŸàŸÑŸà⁄∫ÿü";
      buttonVals = [
        "ÿ™ŸÖ ŸÖ€åÿ±€í ÿØŸàÿ≥ÿ™ €ÅŸà",
        "ÿ™ŸÖ ŸÖ€åÿ±€å ÿØŸàÿ≥ÿ™ €ÅŸà",
        "ÿßŸìŸæ ŸÖ€åÿ±€í ÿØŸàÿ≥ÿ™ €ÅŸà",
        "ÿßŸìŸæ ŸÖ€åÿ±€å ÿØŸàÿ≥ÿ™ €ÅŸà",
        "ÿßŸìŸæ ŸÖ€åÿ±€í ÿØŸàÿ≥ÿ™ €Å€å⁄∫",
        "ÿßŸìŸæ ŸÖ€åÿ±€å ÿØŸàÿ≥ÿ™ €Å€å⁄∫"
      ];
      rForm.style.direction = "rtl";
      break;
        
      default: switch(refer) {
        case "mf0":
        case "ff0":
          pronoun = "‡§§‡•Å‡§Æ";
          break;
        default:
          pronoun = "‡§Ü‡§™";
      }
      document.getElementById("refer_hi-ur_friend").innerHTML = {"‡§Ü‡§™": "‡§Ü‡§™‡§ï‡•ã", "‡§§‡•Å‡§Æ": "‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç"}[pronoun] + " ‡§ï‡•à‡§∏‡•á ‡§¨‡•ã‡§≤‡•Ç‡§Å?";
      buttonVals = [
        "‡§§‡•Å‡§Æ ‡§Æ‡•á‡§∞‡•á ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§π‡•ã",
        "‡§§‡•Å‡§Æ ‡§Æ‡•á‡§∞‡•Ä ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§π‡•ã",
        "‡§Ü‡§™ ‡§Æ‡•á‡§∞‡•á ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§π‡•ã",
        "‡§Ü‡§™ ‡§Æ‡•á‡§∞‡•Ä ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§π‡•ã",
        "‡§Ü‡§™ ‡§Æ‡•á‡§∞‡•á ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§π‡•à‡§Ç",
        "‡§Ü‡§™ ‡§Æ‡•á‡§∞‡•Ä ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§π‡•à‡§Ç"
      ];
      rForm.style.direction = "ltr";
    }
    for (var i = 0; i < rForm.options.length; i++)
      rForm.options[i].innerHTML = buttonVals[i];
    
    if (lang == "hi") {
      if (["mf2", "ff2"].indexOf(refer) != -1) {
        referenceKeys("begin", ["‡§¨‡§®‡§æ‡§ì", "‡§Æ‡§æ‡§®‡•ã"], ["‡§¨‡§®‡§æ‡§è‡§Å", "‡§Æ‡§æ‡§®‡•á‡§Ç"]);
        referenceKeys("catInstruct", ["‡§¨‡§®‡§æ‡§ì", "‡§Æ‡§æ‡§®‡•ã"], ["‡§¨‡§®‡§æ‡§è‡§Å", "‡§Æ‡§æ‡§®‡•á‡§Ç"]);
        currentLangData["rampalInstruct"] = currentLangData["rampalInstruct"].replace("‡§ï‡§∞‡•ã", "‡§ï‡•Ä‡§ú‡§ø‡§è").replaceAll("‡§ï‡§∞‡•ã", "‡§ï‡§∞‡•á‡§Ç").replaceAll("‡§¶‡•ã", "‡§¶‡•á‡§Ç");
        ["catList", "scoreNaN", "submit", "apply", "add", "delete", "edit", "mailSent", "editInstruct",
        "copyGradesInstruct", "dontWorry", "intro", "selectAbove", "addClassOption", "search"].forEach(
          key => referenceKey(key, "‡§ï‡§∞‡•ã", "‡§ï‡§∞‡•á‡§Ç"));
        referenceKey("continue", "‡§¨‡§¢‡§º‡•ã", "‡§¨‡§¢‡§º‡•á‡§Ç");
        currentLangData["intro"] = currentLangData["intro"].replaceAll("‡§ö‡•Å‡§® ‡§≤‡•ã", "‡§ö‡•Å‡§® ‡§≤‡•á‡§Ç").replace("‡§ï‡§∞‡•á‡§Ç", "‡§ï‡•Ä‡§ú‡§ø‡§è");;
        referenceKey("notPossibleGrade", "‡§∞‡§π‡•ã", "‡§∞‡§π‡•á‡§Ç");
        referenceKey("fritzExam", "‡§ï‡§∞‡•ã‡§ó‡•á", "‡§ï‡§∞‡•á‡§Ç‡§ó‡•á");
        ["mailSent", "manualButton", "addClassOption", "sethClassInstruct", "add", "addAssignment",
        "editInstruct"].forEach(
          key => referenceKey(key, "‡§°‡§æ‡§≤‡•ã", "‡§°‡§æ‡§≤‡•á‡§Ç"));
        referenceKey("jsSuccess", "‡§π‡•ã", "‡§π‡•à‡§Ç");
        referenceKey("createCat", "‡§¨‡§®‡§æ‡§ì", "‡§¨‡§®‡§æ‡§è‡§Å");
        referenceKey("editInstruct", "‡§¶‡§¨‡§æ‡§ì", "‡§¶‡§¨‡§æ‡§è‡§Å");
        referenceKey("calcRequiredButton", "‡§≤‡§ó‡§æ‡§ì", "‡§≤‡§ó‡§æ‡§è‡§Å");
        referenceKey("changeWeightButton", "‡§¶‡•ã", "‡§¶‡•á‡§Ç");
        referenceKey("mobileCopyInstruct", "‡§π‡•ã", "‡§π‡•à‡§Ç");
        referenceKey("pasteGradesInstruct", "‡§¶‡§¨‡§æ‡§ì", "‡§¶‡§¨‡§æ‡§è‡§Å");
        referenceKey("dontWorry", "‡§∏‡§ï‡§§‡•á ‡§π‡•ã", "‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç");
        referenceKey("selClass", "‡§ö‡•Å‡§®‡•ã", "‡§ö‡•Å‡§®‡•á‡§Ç");
        referenceKey("selClassOption", "‡§ö‡•Å‡§®‡•ã", "‡§ö‡•Å‡§®‡•á‡§Ç");
        referenceKey("sethClassInstruct", "‡§¶‡§¨‡§æ‡§ì", "‡§¶‡§¨‡§æ‡§è‡§Å");
        referenceKey("pointSystemInstruct", "‡§¶‡•á‡§ñ‡•ã", "‡§¶‡•á‡§ñ‡•á‡§Ç");
        referenceKey("pointSystemInstruct2", "‡§∏‡§ï‡§§‡•á ‡§π‡•ã", "‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç");
        referenceKey("enterNotes", "‡§ö‡§æ‡§π‡•ã", "‡§ö‡§æ‡§π‡•á‡§Ç");
        referenceKey("clearDataButton", "‡§π‡§ü‡§æ‡§ì", "‡§π‡§ü‡§æ‡§è‡§Å");
        referenceKeys("clearDataExp", ["‡§Ü‡§ì‡§ó‡•á", "‡§∞‡§π‡§®‡•á ‡§¶‡•ã", "‡§π‡§ü‡§æ‡§ì", "‡§®‡§æ ‡§π‡•ã"], ["‡§Ü‡§è‡§Å‡§ó‡•á", "‡§∞‡§π‡§®‡•á ‡§¶‡•á‡§Ç", "‡§π‡§ü‡§æ‡§è‡§Å", "‡§®‡§æ ‡§π‡•ã‡§Ç"]);
        referenceKey("getCreditButton", "‡§¶‡•á‡§ñ‡•ã", "‡§¶‡•á‡§ñ‡•á‡§Ç");
        referenceKeys("modifyCreditHeading", ["‡§¨‡§¶‡§≤‡•ã", "‡§π‡§ü‡§æ‡§ì"], ["‡§¨‡§¶‡§≤‡•á‡§Ç", "‡§π‡§ü‡§æ‡§è‡§Å"]);
        referenceKey("pronunciation", "‡§ï‡§π ‡§¶‡•ã", "‡§ï‡§π ‡§¶‡•Ä‡§ú‡§ø‡§è");
        referenceKey("deleteAssignment", "‡§®‡§ø‡§ï‡§æ‡§≤‡•ã", "‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç");
        referenceKey("editInstruct", "‡§®‡§ø‡§ï‡§æ‡§≤‡•ã", "‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç");
        referenceKey("delete", "‡§®‡§ø‡§ï‡§æ‡§≤‡•ã", "‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç");
        referenceKey("selectLetter", "‡§≤‡•ã", "‡§≤‡•á‡§Ç");
        referenceKey("deleteCatButton", "‡§ì", "‡§è‡§Å");
        referenceKey("validData", "‡§ï‡§∞‡•ã", "‡§ï‡•Ä‡§ú‡§ø‡§è");
      }
      if (["mf0", "ff0"].indexOf(refer) != -1) {
        ["reqScore_0", "reqScore", "welcome", "intro", "copyGradesInstruct", "superAlgorithm",
        "clearDataExp"].forEach(
          key => referenceKey(key, "‡§Ü‡§™‡§ï‡•ã", "‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç"));
        ["begin", "confirm"].forEach(
          key => referenceKey(key, "‡§Ü‡§™‡§ï‡•ã", "‡§§‡•Å‡§Æ‡§ï‡•ã"));
        ["begin", "scoreNaN", "notPossibleGrade", "mailSent", "welcome", "jsSuccess"].forEach(
          key => referenceKey(key, "‡§Ü‡§™‡§ï", "‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞"));
        ["fritzExam", "welcome", "jsSuccess", "clearDataExp"].forEach(
          key => referenceKey(key, "‡§Ü‡§™", "‡§§‡•Å‡§Æ"));
        ["mobileCopyInstruct", "dontWorry"].forEach(
          key => referenceKey(key, "‡§Ü‡§™ ", ""));
      }
      if (["ff0", "ff1", "ff2"].indexOf(refer) != -1) {
        ["notPossibleGrade", "jsSuccess", "mobileCopyInstruct", "dontWorry", "pointSystemInstruct2"].forEach(
          key => referenceKeys(key, ["‡§§‡•á", "‡§á‡§∏‡•ç‡§§‡•Ä‡§Æ‡§æ‡§≤"], ["‡§§‡•Ä", "‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤"]));
        referenceKey("fritzExam", "‡§ó‡•á)", "‡§ó‡•Ä)");
        referenceKeys("clearDataExp", ["‡§Ü‡§ì‡§ó‡•á", "‡§Ü‡§è‡§Å‡§ó‡•á"], ["‡§Ü‡§ì‡§ó‡•Ä", "‡§Ü‡§è‡§Å‡§ó‡•Ä"]);
        referenceKey("jsSuccess", "‡§∞‡§π‡•á", "‡§∞‡§π‡•Ä");
      }
    } else if (lang == "ur") {
      if (["mf2", "ff2"].indexOf(refer) != -1) {
        referenceKeys("begin", ["ÿ®ŸÜÿßÿ§", "ŸÖÿßŸÜŸà"], ["ÿ®ŸÜÿßÿ¶€å⁄∫", "ŸÖÿßŸÜ€å⁄∫"]);
        referenceKeys("catInstruct", ["ÿ®ŸÜÿßÿ§", "ŸÖÿßŸÜŸà"], ["ÿ®ŸÜÿßÿ¶€å⁄∫", "ŸÖÿßŸÜ€å⁄∫"]);
        currentLangData["rampalInstruct"] = currentLangData["rampalInstruct"].replace("⁄©ÿ±Ÿà", "⁄©€åÿ¨ÿ¶€í").replaceAll("⁄©ÿ±Ÿà", "⁄©ÿ±€å⁄∫").replaceAll("ÿØŸà", "ÿØ€å⁄∫");
        ["catList", "scoreNaN", "submit", "apply", "add", "delete", "edit", "mailSent", "editInstruct",
        "copyGradesInstruct", "dontWorry", "intro", "selectAbove", "addClassOption", "search"].forEach(
          key => referenceKey(key, "⁄©ÿ±Ÿà", "⁄©ÿ±€å⁄∫"));
        referenceKey("continue", "ÿ®⁄ë⁄æŸà", "ÿ®⁄ë⁄æ€å⁄∫");
        currentLangData["intro"] = currentLangData["intro"].replaceAll("⁄ÜŸÜ ŸÑŸà", "⁄ÜŸÜ ŸÑ€å⁄∫").replace("⁄©ÿ±€å⁄∫", "⁄©€åÿ¨ÿ¶€í");
        referenceKey("notPossibleGrade", "ÿ±€ÅŸà", "ÿ±€Å€å⁄∫");
        referenceKey("fritzExam", "⁄©ÿ±Ÿà ⁄Ø€í", "⁄©ÿ±€å⁄∫ ⁄Ø€í");
        ["mailSent", "manualButton", "addClassOption", "sethClassInstruct", "add", "addAssignment",
        "editInstruct"].forEach(
          key => referenceKey(key, "⁄àÿßŸÑŸà", "⁄àÿßŸÑ€å⁄∫"));
        referenceKey("jsSuccess", "€ÅŸà", "€Å€å⁄∫");
        referenceKey("createCat", "ÿ®ŸÜÿßÿ§", "ÿ®ŸÜÿßÿ¶€å⁄∫");
        referenceKey("editInstruct", "ÿØÿ®ÿßÿ§", "ÿØÿ®ÿßÿ¶€å⁄∫");
        referenceKey("calcRequiredButton", "ŸÑ⁄Øÿßÿ§", "ŸÑ⁄Øÿßÿ¶€å⁄∫");
        referenceKey("changeWeightButton", "ÿØŸà", "ÿØ€å⁄∫");
        referenceKey("mobileCopyInstruct", "€ÅŸà", "€Å€å⁄∫");
        referenceKey("pasteGradesInstruct", "ÿØÿ®ÿßÿ§", "ÿØÿ®ÿßÿ¶€å⁄∫");
        referenceKey("dontWorry", "ÿ≥⁄©ÿ™€í €ÅŸà", "ÿ≥⁄©ÿ™€í €Å€å⁄∫");
        referenceKey("selClass", "⁄ÜŸÜŸà", "⁄ÜŸÜ€å⁄∫");
        referenceKey("selClassOption", "⁄ÜŸÜŸà", "⁄ÜŸÜ€å⁄∫");
        referenceKey("sethClassInstruct", "ÿØÿ®ÿßÿ§", "ÿØÿ®ÿßÿ¶€å⁄∫");
        referenceKey("pointSystemInstruct", "ÿØ€å⁄©⁄æŸà", "ÿØ€å⁄©⁄æ€å⁄∫");
        referenceKey("pointSystemInstruct2", "ÿ≥⁄©ÿ™€í €ÅŸà", "ÿ≥⁄©ÿ™€í €Å€å⁄∫");
        referenceKey("enterNotes", "⁄Üÿß€ÅŸà", "⁄Üÿß€Å€å⁄∫");
        referenceKey("clearDataButton", "€ÅŸπÿßÿ§", "€ÅŸπÿßÿ¶€å⁄∫");
        referenceKeys("clearDataExp", ["ÿßŸìÿ§ ⁄Ø€í", "ÿ±€ÅŸÜ€í ÿØŸà", "€ÅŸπÿßÿ§", "ŸÜ€Å €ÅŸà"], ["ÿßŸìÿ¶€å⁄∫ ⁄Ø€í", "ÿ±€ÅŸÜ€í ÿØ€å⁄∫", "€ÅŸπÿßÿ¶€å⁄∫", "ŸÜ€Å €ÅŸà⁄∫"]);
        referenceKey("getCreditButton", "ÿØ€å⁄©⁄æŸà", "ÿØ€å⁄©⁄æ€å⁄∫");
        referenceKeys("modifyCreditHeading", ["ÿ®ÿØŸÑŸà", "€ÅŸπÿßÿ§"], ["ÿ®ÿØŸÑ€å⁄∫", "€ÅŸπÿßÿ¶€å⁄∫"]);
        referenceKey("pronunciation", "⁄©€Å€Å ÿØŸà", "⁄©€Å€Å ÿØ€åÿ¨ÿ¶€í");
        referenceKey("deleteAssignment", "ŸÜ⁄©ÿßŸÑŸà", "ŸÜ⁄©ÿßŸÑ€å⁄∫");
        referenceKey("delete", "ŸÜ⁄©ÿßŸÑŸà", "ŸÜ⁄©ÿßŸÑ€å⁄∫");
        referenceKey("editInstruct", "ŸÜ⁄©ÿßŸÑŸà", "ŸÜ⁄©ÿßŸÑ€å⁄∫");
        referenceKey("selectLetter", "ŸÑŸà", "ŸÑ€å⁄∫");
        referenceKey("deleteCatButton", "ÿ§", "ÿ¶€å⁄∫");
        referenceKey("validData", "⁄©ÿ±Ÿà", "⁄©€åÿ¨ÿ¶€í");
      }
      if (["mf0", "ff0"].indexOf(refer) != -1) {
        ["reqScore_0", "reqScore", "welcome", "intro", "copyGradesInstruct", "superAlgorithm",
        "clearDataExp"].forEach(
          key => referenceKey(key, "ÿßŸìŸæ ⁄©Ÿà", "ÿ™ŸÖ€Å€å⁄∫"));
        ["begin", "confirm"].forEach(
          key => referenceKey(key, "ÿßŸìŸæ ⁄©Ÿà", "ÿ™ŸÖ ⁄©Ÿà"));
        ["begin", "scoreNaN", "notPossibleGrade", "mailSent", "welcome", "jsSuccess"].forEach(
          key => referenceKeys(key, ["ÿßŸìŸæ ⁄©ÿß", "ÿßŸìŸæ ⁄©€å", "ÿßŸìŸæ ⁄©€í"], ["ÿ™ŸÖ€Åÿßÿ±ÿß", "ÿ™ŸÖ€Åÿßÿ±€å", "ÿ™ŸÖ€Åÿßÿ±€í"]));
        ["fritzExam", "welcome", "jsSuccess", "clearDataExp"].forEach(
          key => referenceKey(key, "ÿßŸìŸæ", "ÿ™ŸÖ"));
        ["mobileCopyInstruct", "dontWorry"].forEach(
          key => referenceKey(key, "ÿßŸìŸæ ", ""));
      }
      if (["ff0", "ff1", "ff2"].indexOf(refer) != -1) {
        ["notPossibleGrade", "jsSuccess", "mobileCopyInstruct", "dontWorry", "pointSystemInstruct2"].forEach(
          key => referenceKey(key, "ÿ™€í", "ÿ™€å"));
        referenceKey("fritzExam", "⁄Ø€í)", "⁄Ø€å)");
        referenceKeys("clearDataExp", ["ÿßŸìÿ§ ⁄Ø€í", "ÿßŸìÿ§ ⁄Ø€å"], ["ÿßŸìÿ¶€å⁄∫ ⁄Ø€í", "ÿßŸìÿ¶€å⁄∫ ⁄Ø€å"]);
        referenceKey("jsSuccess", "ÿ±€Å€í", "ÿ±€Å€å");
      }
    }
  }
  if (["es"].indexOf(lang) == -1) {
    document["refer_es"].style.display = "none";
  } else {
    document["refer_es"].style.display = "";
    rForm = document["refer_es"]["r_es"];
    refer = rForm.value;
    var pronoun;
    switch(refer) {
      case "mf1":
      case "ff1":
        pronoun = "usted";
        break;
      default:
        pronoun = "t√∫";
    }
    document.getElementById("refer_es_friend").innerHTML = "¬øC√≥mo debo llamar"+{"nf0": "te", "mf0": "te", "ff0": "te", "nf1": "lo/la", "mf1": "lo", "ff1": "la"}[refer] + "?";
    
    if (["mf1", "ff1", "nf1"].indexOf(refer) != -1) {
      referenceKeys("begin", ["crea", "haz", "consid√©ra", "tu nota"], ["cree", "haga", "consid√©re", "su nota"]);
      referenceKeys("catInstruct", ["haz", "hagas", "consid√©ra", "tu nota"], ["haga", "haga", "consid√©re", "su nota"]);
      referenceKey("catList", "Haz", "Haga");
      referenceKeys("scoreNaN", ["tienes", "trata"], ["tiene", "trate"]);
      referenceKeys("rampalInstruct", ["Haz", "Mira", "introd√∫ce"], ["Haga", "Mire", "introd√∫zca"]);
      referenceKey("notPossibleGrade", "para ti", "para usted");
      referenceKey("fritzExam", "hagas", "haga");
      referenceKey("validData", "introduce", "introduzca");
      referenceKeys("mailSent", ["Tu res", "vuelve", "ponte", "tu sol"], ["Su res", "vuelva", "p√≥ngase", "su sol"]);
      referenceKey("reqScore_0", "Debes", "Debe");
      referenceKey("reqScore", "Debes", "Debe");
      referenceKeys("welcome", ["tienes", "tengas", "sabes", "te preocupes", "por ti"], ["tiene", "tenga", "sabe", "se preocupe", "por usted"]);
      referenceKeys("jsSuccess", ["est√°s", "tienes", "puedes"], ["usted est√°", "tiene", "puede"]);
      referenceKeys("intro", ["ponte en", "encuentras", "A√±ade", "puedas", "selecciona"], ["p√≥ngase en", "encuentra", "A√±ada", "pueda", "seleccione"]);
      referenceKeys("editInstruct", ["introduce tu", "haz", "a√±ade", "borra"], ["introduzca su", "haga", "a√±ada", "borre"]);
      referenceKey("selectLetter", "Selecciona", "Seleccione");
      referenceKey("copyGradesInstruct", "copia tus", "copie sus");
      referenceKeys("mobileCopyInstruct", ["est√°s", "puedes"], ["est√°", "puede"]);
      referenceKeys("pasteGradesInstruct", ["p√©ga", "haz"], ["p√©gue", "haga"]);
      referenceKey("superAlgorithm", "tus ", "sus ");
      referenceKey("dontWorry", "te preocupes", "se preocupe");
      referenceKey("selClass", "Selecciona", "Seleccione");
      referenceKeys("sethClassInstruct", ["introduce", "marca"], ["introduzca", "marque"]);
      referenceKey("pointSystemInstruct", "mira", "mire");
      referenceKey("pointSystemInstruct2", "teclea", "teclee");
      referenceKey("selectAbove", "Selecciona", "Seleccione");
      referenceKeys("clearDataExp", ["te oblig", "visites", "dejas", "est√°s", "tu GPA"], ["lo/la oblig", "visite", "deja", "est√°", "su GPA"]);
      referenceKeys("confirm", ["Est√°s", "quieres"], ["Est√°", "quiere"]);
      referenceKey("pronunciation", "Di ", "Diga ");
    }
    if (["mf0", "mf1"].indexOf(refer) != -1) {
      referenceKey("welcome", "Bienvenidos", "Bienvenido");
      referenceKey("confirm", "seguro/a", "seguro");
      referenceKey("clearDataExp", "lo/la oblig", "lo oblig");
    }
    if (["ff0", "ff1"].indexOf(refer) != -1) {
      referenceKey("welcome", "Bienvenidos", "Bienvenida");
      referenceKey("confirm", "seguro/a", "segura");
      referenceKey("clearDataExp", "lo/la oblig", "la oblig");
    }
  }
  if (["fa"].indexOf(lang) == -1) {
    document["refer_fa"].style.display = "none";
  } else {
    document["refer_fa"].style.display = "";
    rForm = document["refer_fa"]["r_fa"];
    refer = rForm.value;
    var pronoun = {"f0": "ÿ™Ÿà", "f1": "ÿ¥ŸÖÿß"}[refer];
    document.getElementById("refer_fa_friend").innerHTML = "⁄Ü⁄ØŸàŸÜŸá ÿ®ÿß€åÿØ ÿ®ÿß " + pronoun + " ÿµÿ≠ÿ®ÿ™ ⁄©ŸÜŸÖÿü";
    
    if (refer == "f0") {
      referenceKeys("begin", ["⁄©ŸÜ€åÿØ", "ŸÜŸÖÿ±ŸáŸî ÿ¥ŸÖÿß"], ["⁄©ŸÜ", "ŸÜŸÖÿ±ŸáŸî ÿ™Ÿà"]);
      referenceKeys("catInstruct", ["⁄©ŸÜ€åÿØ", "ŸÜŸÖÿ±ŸáŸî ÿ¥ŸÖÿß"], ["⁄©ŸÜ", "ŸÜŸÖÿ±ŸáŸî ÿ™Ÿà"]);
      referenceKey("catList", "ÿ®⁄©ŸÜ€åÿØ", "ÿ®⁄©ŸÜ");
      referenceKeys("scoreNaN", ["ÿ±ÿ¨ ÿ¥ŸÖÿß", "⁄©ŸÜ€åÿØ"], ["ÿ±ÿ¨ÿ™", "⁄©ŸÜ"]);
      referenceKeys("rampalInstruct", ["⁄©ŸÜ€åÿØ", "ÿ®ŸÜŸà€åÿ≥€åŸÜ"], ["⁄©ŸÜ", "ÿ®ŸÜŸà€åÿ≥"]);
      referenceKeys("notPossibleGrade", ["ÿ®ÿ±ÿß€å ÿ¥ŸÖÿß", "ÿ®ÿØŸá€åÿØ"], ["ÿ®ÿ±ÿß€å ÿ™Ÿà", "ÿ®ÿØŸá"]);
      referenceKey("fritzExam", "ŸÜ⁄©ŸÜ€åÿØ", "ŸÜ⁄©ŸÜ");
      referenceKey("validData", "ÿ®⁄©ŸÜ€åÿØ", "ÿ®⁄©ŸÜ");
      referenceKeys("mailSent", ["ÿ≥ÿÆ ÿ¥ŸÖÿß", "ÿ™ÿ¥⁄©ÿ±", "ÿ®⁄Øÿ±ÿØ€åÿØ", "⁄©ŸÜ€åÿØ", "ÿ®⁄Ø€åÿ±€åÿØ", "ÿÆÿßÿ≥ÿ™ ÿ¥ŸÖÿß"], ["ÿ≥ÿÆÿ™", "ŸÖÿ±ÿ≥€å", "ÿ®⁄Øÿ±ÿØ", "⁄©ŸÜ", "ÿ®⁄Ø€åÿ±", "ÿÆÿßÿ≥ÿ™ÿ™"]);
      referenceKeys("reqScore_0", ["ÿ¥ŸÖÿß ", "ÿ®⁄Ø€åÿ±€åÿØ"], ["", "ÿ®⁄Ø€åÿ±"]);
      referenceKeys("reqScore", ["ÿ¥ŸÖÿß ", "ÿ®⁄Ø€åÿ±€åÿØ"], ["", "ÿ®⁄Ø€åÿ±"]);
      referenceKeys("welcome", ["ÿ®ÿ®€åŸÜ€åÿØ", "ÿ¥ŸÖÿß", "ÿØÿßÿ±€åÿØ", "ÿ®ÿØÿßŸÜ€åÿØ", "ŸÜÿ®ÿßÿ¥€åÿØ", "ÿØÿßŸÜ€åÿØ"], ["ÿ®ÿ®€åŸÜ", "ÿ™Ÿà", "ÿØÿßÿ±€å", "ÿ®ÿØÿßŸÜ", "ŸÜÿ®ÿßÿ¥", "ÿØÿßŸÜ€å"]);
      referenceKeys("jsSuccess", ["ÿ¥ŸÖÿß ", "ÿØÿßÿ±€åÿØ", "ÿ™ŸàÿßŸÜ€åÿØ", "ÿÆŸàÿßŸÜ€åÿØ", "⁄©ŸÜ€åÿØ"], ["", "ÿØÿßÿ±€å", "ÿ™ŸàÿßŸÜ€å", "ÿÆŸàÿßŸÜ€å", "⁄©ŸÜ"]);
      referenceKeys("intro", ["⁄©ŸÜ€åÿØ", "ÿ¥ŸÖÿß ", "ÿ®⁄Ø€åÿ±€åÿØ", "ÿ™ŸàÿßŸÜ€åÿØ"], ["⁄©ŸÜ", "", "ÿ®⁄Ø€åÿ±", "ÿ™ŸàÿßŸÜ€å"]);
      referenceKeys("editInstruct", ["⁄©ŸÜ€åÿØ", "ŸÜŸà€åÿ≥€åÿØ"], ["⁄©ŸÜ", "ŸÜŸà€åÿ≥"]);
      referenceKey("selectLetter", "⁄©ŸÜ€åÿØ", "⁄©ŸÜ");
      referenceKeys("copyGradesInstruct", ["⁄©ŸÜ€åÿØ", "ÿ™ ÿ¥ŸÖÿß"], ["⁄©ŸÜ", "ÿ™ÿ™"]);
      referenceKeys("mobileCopyInstruct", ["ÿ¥ŸÖÿß ", "Ÿáÿ≥ÿ™€åÿØ", "ÿ™ŸàÿßŸÜ€åÿØ", "⁄©ŸÜ€åÿØ"], ["", "Ÿáÿ≥ÿ™€å", "ÿ™ŸàÿßŸÜ€å", "⁄©ŸÜ"]);
      referenceKeys("pasteGradesInstruct", ["ÿ®⁄Üÿ≥ÿ®ŸàŸÜ€åÿØ", "⁄©ŸÜ€åÿØ"], ["ÿ®⁄Üÿ≥ÿ®ŸàŸÜ", "⁄©ŸÜ"]);
      referenceKey("superAlgorithm", "ÿ™ ÿ¥ŸÖÿß", "ÿ™ÿ™");
      referenceKey("dontWorry", ["ŸÜÿ®ÿßÿ¥€åÿØ", "ÿ™ŸàÿßŸÜ€åÿØ", "⁄©ŸÜ€åÿØ"], ["ŸÜÿ®ÿßÿ¥", "ÿ™ŸàÿßŸÜ€å", "⁄©ŸÜ"]);
      referenceKeys("selClass", ["⁄©ŸÜ€åÿØ", "ÿ™ŸàÿßŸÜ€åÿØ"], ["⁄©ŸÜ", "ÿ™ŸàÿßŸÜ€å"]);
      referenceKey("sethClassInstruct", "⁄©ŸÜ€åÿØ", "⁄©ŸÜ");
      referenceKey("pointSystemInstruct", "ÿ®ÿ®€åŸÜ€åÿØ", "ÿ®ÿ®€åŸÜ");
      referenceKey("pointSystemInstruct2", ["ÿ™ŸàÿßŸÜ€åÿØ", "ŸÜŸà€åÿ≥€åÿØ"], ["ÿ™ŸàÿßŸÜ€å", "ŸÜŸà€åÿ¥"]);
      referenceKey("minGrade", "ÿ™ŸàÿßŸÜ€åÿØ", "ÿ™ŸàÿßŸÜ€å");
      referenceKey("fritzExam", "ÿ™ŸàÿßŸÜ€åÿØ", "ÿ™ŸàÿßŸÜ€å");
      referenceKey("selectAbove", "⁄©ŸÜ€åÿØ", "⁄©ŸÜ");
      referenceKeys("clearDataExp", ["ÿ¥ŸÖÿß ÿ±ÿß", "ÿßŸì€å€åÿØ", "GPA ÿ¥ŸÖÿß",
      "⁄©ŸÜ€åÿØ","⁄Øÿ∞ÿßÿ±€åÿØ", "ŸÜ€åÿ≥ÿ™€åÿØ"], ["ÿ™Ÿà ÿ±ÿß", "ÿßŸì€å€å", "GPAÿ™",
      "⁄©ŸÜ", "⁄Øÿ∞ÿßÿ±", "ŸÜ€åÿ≥ÿ™€å"]);
      referenceKeys("confirm", ["ÿÆŸàÿßŸÜ€åÿØ", "⁄©ŸÜ€åÿØ"], ["ÿÆŸàÿßŸÜ€å", "⁄©ŸÜ"]);
      referenceKey("pronunciation", "ÿ®⁄ØŸà€å€åÿØ", "ÿ®⁄ØŸà");
    }
  }
}
function referenceKey(key, o, n) {
  currentLangData[key] = currentLangData[key].replaceAll(o, n);
}
function referenceKeys(key, o, n) {
  for (var i = 0; i < o.length; i++)
    currentLangData[key] = currentLangData[key].replaceAll(o[i], n[i]);
}
function setDialect() {
  var dialect = null;
  if (lang == "en") {
    document["dialect_en"].style.display = "";
    dialect = document["dialect_en"]["d_en"].value;
    document.getElementById("d_en_dialect").innerHTML = "Dialect: ";
    if (dialect == "UK") {
      ["edit", "notPossibleGrade", "minGrade", "fritzExam",
      "mobileCopyInstruct", "manualButton", "minExam",
      "copyGradesInstruct", "dontWorry"].forEach(
          key => currentLangData[key]=currentLangData[key].replaceAll("grade", "mark"));
      referenceKey("welcome", "you need to make", "you've got to make");
      referenceKey("begin", "grades", "marks");
      referenceKey("examGrade", "grade", "score");
      referenceKey("setPoint", "Grading", "Scoring");
      referenceKey("shouldContinue", "Should", "Shall");
      referenceKey("ritvikHonor", "honor", "honour");
    } else if (dialect == "ASCII") {
      var keys = Object.keys(currentLangData);
      currentLangData["pronunciation"] = "Say: HAH-riss DAHL-vee";
      for (var k = 0; k < keys.length; k++) {
        if (["languages", "numbers"].indexOf(keys[k]) == -1) {
          var tag = 0;
          var inVar = false;
          referenceKeys(keys[k], ["&nbsp;", "&ldquo;", "&rdquo;"], [" ", '"', '"']);
          for (var i = currentLangData[keys[k]].length; i >= 1; i--) {
            var char = currentLangData[keys[k]].substring(i-1,i);
            if (char == ">") {
              tag++;
            } else if (char == "<") {
              tag--;
            } else if (char == "$") {
              inVar = true;
            } else {
              inVar = false;
              for (var j = i-1; j >= 1; j--) {
                var char2 = currentLangData[keys[k]].substring(j-1,j);
                if (char2 == "$") {
                  inVar = true;
                  break;
                } else if (char2 === char2.toLowerCase()) {
                  break;
                }
              }
              if (tag == 0 && !inVar) {
                var bin = currentLangData[keys[k]].charCodeAt(i-1).toString(2);
                while (bin.length < 8)
                  bin = "0"+bin;
                currentLangData[keys[k]] = currentLangData[keys[k]].substring(0, i-1) + 
                bin + " " + currentLangData[keys[k]].substring(i);
              }
            }
          }
        }
      }
      currentLangData["numbers"] = ["0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010"];
      document.getElementById("d_en_dialect").innerHTML = "01000100 01101001 01100001 01101100 01100101 01100011 01110100 00111010";
    } else if (dialect == "1600") {
      referenceKeys("begin", ["creating categories", "scores", "if the class is based", "point system", "category", "called something like", "your"],
      ["fashioning Categories", "Scores", "should the Class be based", "the Point System", "Category", "whose name is like", "thy"]);
      referenceKeys("catInstruct",
      ["scores", "if the class is based", "point system", "category", "called something like", "your"],
      ["Scores", "should the Class be based", "the Point System", "Category", "whose Name is like", "thy"]);
      referenceKeys("catNameExists", ["is already", "category", "name"], ["already is", "Category", "Name"]);
      referenceKey("catList", "that category's score", "the Score of that category");
      referenceKeys("avg", ["class", "categories", "grade"], ["Class", "Categories", "Score"]);
      referenceKeys("noCat", ["category", "currently", "selected"], ["Category", "now", "chosen"]);
      referenceKeys("scoreNaN", ["zero", "at least one category", "Try adding", "assignments", "You have"],
      ["Zero", "one or more Categories", "Do attempt it to add", "Assignments", "Thou hast"]);
      referenceKey("catsFound", "categories found", "Categories were found");
      referenceKey("delete", "Delete", "Remove");
      currentLangData["notPossibleGrade"] = "'Tis a grievous calamity that this Score is not possible for thee this Semester. I do bid thee well for the next Semester!";
      referenceKeys("minGrade", ["goes in", "exam", "you don't"], ["goeth", "Exam", "thou dost not"]);
      referenceKeys("minGrade", ["goes in", "exam", "you don't"], ["goeth", "Exam", "thou dost not"]);
      currentLangData["validData"] = "Prithee, do entre valid information.";
      referenceKeys("mailSent", ["Your response", "Thank you!", "manually", "If the class isn't", "please contact", "your request"],
      ["Thy Response", "I humbly thank thee.", "by hand", "Should the Class be not", "prithee contact", "thy request"]);
      referenceKey("reqScore_0", "You", "Thou");
      referenceKey("reqScore", "You", "Thou");
      referenceKeys("welcome", ["you need to make sure you have", "grade calculator", "you don't know", "don't worry",
      "I'll do it for you"],
      ["thou must be sure thou hast", "Grade Calculator", "thou knowest not", "do not despair", "I shall do't for thee"]);
      referenceKeys("jsSuccess", ["you're reading", "you have", "can use"],
      ["thou art reading", "thou hast", "mayst use"]);
      referenceKeys("intro", ["I am also human", "Please c", "if you catch a mistake", "so you can"],
      ["I, too, am but a person", "Prithee do c", "should thou find a fault", "so thou canst"]);
      referenceKey("whatNeed", "an upcoming", "a forthcoming");
      referenceKey("copyGradesInstruct", "your", "thy");
      referenceKeys("mobileCopyInstruct", ["you are", "you can", "mobile device", "highlight"], ["thou art", "thou canst", "Mobile Device", "mark"]);
      referenceKeys("superAlgorithm", ["My super cool algorithm simplified your"], ["Mine exceedingly fine algorithm did simplify thy"]);
      referenceKey("shouldContinue", "Should", "Shall");
      currentLangData["manualButton"] = "Entre Scores by Hand";
      referenceKeys("sethClassInstruct", ["Please", "check that"], ["Prithee", "mark that"]);
      referenceKeys("pointSystemInstruct", ["check h", "it is", "categories", "Otherwise,"], ["see h", "'tis", "Categories", "Else"]);
      referenceKeys("clearDataExp", ["force you", "re-enter your", "you visit", "data", "If you leave", "you aren't"],
      ["force thee", "again entre thy", "thou visitest", "information", "Should thou leave", "thou be not"]);
      referenceKey("modifyCreditHeading", "Modify/delete credit", "Change/remove Credit");
      referenceKey("deleteAssignment", "Delete", "Remove");
      referenceKeys("editInstruct", ["Delete", "delete", "the same way"], ["Remove", "remove", "this very manner"]);
      referenceKey("clearDataButton", "Data", "Information");
      currentLangData["confirm"] = "Art thou certain thou dost wish to do this?";
      var keys = Object.keys(currentLangData);
      for (var k = 0; k < keys.length; k++) {
        if (["languages", "numbers"].indexOf(keys[k]) == -1) {
          var tag = 0;
          var inVar = false;
          for (var i = currentLangData[keys[k]].length; i >= 1; i--) {
            var char = currentLangData[keys[k]].substring(i-1,i);
            if (char == ">") {
              tag++;
            } else if (char == "<") {
              tag--;
            } else {
              if (tag == 0) {
                var char2 = " ";
                var newC = char;
                if (i < currentLangData[keys[k]].length)
                  char2 = currentLangData[keys[k]].substring(i,i+1);
                if ([" ", ".", ",", ";", "?", ";", "\"", ")", "f", "'", "b", "k", "-", ":", "/", "!"].indexOf(char2) == -1
                && ["s", "v"].indexOf(char) != -1)
                  newC = {"s": "≈ø", "v": "u"}[char];
                if (i == 1 && char == "U")
                  newC = "V";
                currentLangData[keys[k]] = currentLangData[keys[k]].substring(0, i-1) + 
                newC + currentLangData[keys[k]].substring(i);
              }
            }
          }
          referenceKey(keys[k], "f≈ø", "fs");
          referenceKey(keys[k], "≈ø≈ø", "≈øs");
          referenceKey(keys[k], " u", " v");
          referenceKey(keys[k], " U", " V");
          referenceKey(keys[k], "JauaScript", "JavaScript");
          referenceKey(keys[k], "ah≈øchool", "ahschool");
          referenceKey(keys[k], "point ≈øy≈øtem", "Point Sy≈øtem");
          referenceKey(keys[k], "grade", "Score");
          referenceKey(keys[k], "Grade", "Score");
          referenceKey(keys[k], "<i>A≈øsignment</i>", "<i>Assignment</i>");
          referenceKey(keys[k], "&nb≈øp;", "&nbsp;");
          referenceKey(keys[k], "&nda≈øh;", "&ndash;");
          referenceKey(keys[k], "&mda≈øh;", "&mdash;");
          referenceKeys(keys[k], ["enter", "Enter"], ["entre", "Entre"]);
          referenceKeys(keys[k], ["required", "Required"], ["necessary", "Necessary"]);
        }
      }
      currentLangData["pronunciation"] = "Say: HAH-riss DAHL-vee";
      referenceKeys("dontWorry", ["been entreed yet", "Don't worry", "don't worry", "you can manually", "category after"],
      ["yet been entered", "Grieve not", "grieve not", "thou canst", "category by hand after"]);
    } else if (dialect == "Anglish") {
      referenceKey("mobileCopyInstruct", "select", "highlight");
      var keys = Object.keys(currentLangData);
      var anglish_english = {"category": "set", "categories": "sets", "creating": "making", "create": "make",
      "system": "framework", "total": "whole", "consider": "deem", "grade": "score", "lazy": "idle",
      "adding": "putting in", "add": "put in", "remove": "take out", "delete": "take out", "an assignment": "a chore",
      "assignment": "chore", "average": "norm", "class": "field", "sum": "whole", "denominator": "bottom", "zero": "naught",
      "error": "mistake", "entered": "put in", "enter its": "put in its", "enter it": "put it in", "enter": "put in", "continue": "go on", "submit": "send", "manually": "by hand",
      "apply": "set", "unfortunately": "sadly", "is not possible": "cannot be", "/Possible": "/Could-be",
      "semester": "halfyear", "quarter": "season", "minimum": "least", "required": "needed", "examples": "like", "exam": "test",
      "valid": "sound", "response": "answer", "available": "at hand", "contact": "write to",
      "request": "wish", "cumulative": "gathered", "receive": "get", "language": "tongue", "calculator": "reckoner",
      "make sure you": "see to it that you", "message": "writ", "NOTE:": "WRIT:", "despite": "notwithstanding",
      "human": "flesh and blood", "selecting": "choosing", "selected": "chosen", "select": "choose", "calculation": "reckoning",
      "percentage": "byhundred", "percent": "byhundred", "(ex:": "(like:", "point": "mark", "letter": "rune",
      "credit to": "thanks to", "credit": "schooltime", "note": "writ", "type": "write", "EXACT": "WORD FOR WORD",
      "appear": "seem", "order": "row", "optional": "not needed", "suggested": "put forward", "computer": "reckoner",
      "in honor of": "to thank", "clearing": "wiping", "clear": "wipe", "data": "input", "visit": "come to", "force you to": "bind you to",
      "page": "websheet", "saved": "kept", "edit": "work", "mobile device": "handheld tool", "including": "along with",
      "simply": "straightforwardly", "view": "see", "super cool": "mighty cool", "view": "see", "based on": "built on",
      "please": "do", "simplified": "cleaned", "check that": "mark that", "check how much": "see how much",
      "changed": "bent", "change": "bend", "calculate": "reckon", "figure out": "find out", "quizzes": "smalltests",
      "numbers": "telling", "number": "telling", "modify": "bend", "incognito mode": "unnamed mood", "are you sure you": "do you truly",
      "scale": "reckoning", "grading": "scoring", "search": "hunt", "use": "work", "idea": "thought",
      "pain": "soreness", "peace": "shelter", "correct": "right", "image": "drawing"};
      var english_words = Object.keys(anglish_english);
      for (var k = 0; k < keys.length; k++) {
        if (["languages", "numbers"].indexOf(keys[k]) == -1) {
          for (var i = 0; i < english_words.length; i++) {
            referenceKey(keys[k], english_words[i], anglish_english[english_words[i]]);
            referenceKey(keys[k], english_words[i].substring(0,1).toUpperCase()+english_words[i].substring(1),
            anglish_english[english_words[i]].substring(0, 1).toUpperCase()+anglish_english[english_words[i]].substring(1));
          }
        }
      }
      referenceKey("mobileCopyInstruct", "Chore", "Assignment");
      referenceKey("dontWorry", "by hand put in that set", "put in that set by hand");
      referenceKey("clearDataExp", "re-put in your GPA", "put in your GPA again");
      referenceKeys("footer", ["October", "June"], ["Fall", "Summer"]);
      referenceKeys("catInstruct", ["Do don't", "an existing name"], ["Don't", "a name from before"]);
      referenceKey("selClass", "automatically fill in byhundreds/weighting", "have byhundreds/weighting fill in by themselves");
      currentLangData["manualButton"] = "Put in grades by hand";
      currentLangData["announcements"] += "<br>If you're wondering, \"Anglish\" is a kind of English that borrows as few " +
        "outland (mostly Latin, Greek, and French) words as can be. Some writers, like George Orwell, thought that " +
        "it would be good to have more of these Anglo-Saxon words in writing. Many are easier than the outland words, " +
        "but a few feel odd.";
      document.getElementById("d_en_dialect").innerHTML = "Speak: ";
    }
  } else {
    document["dialect_en"].style.display = "none";
  }
  if (lang == "es") {
    document["dialect_es"].style.display = "";
    dialect = document["dialect_es"]["d_es"].value;
    if (dialect == "ES") {
      referenceKey("intro", "computadoras", "ordenadores");
      referenceKeys("superAlgorithm", ["simplific√≥", "genial"], ["ha simplificado", "guay"]);
    }
  } else {
    document["dialect_es"].style.display = "none";
  }
  if (lang == "fa") {
    document["dialect_fa"].style.display = "";
    dialect = document["dialect_fa"]["d_fa"].value;
    if (dialect == "AF") {
      referenceKey("mailSent", "ŸÖÿ±ÿ≥€å!", "ÿ™ÿ¥⁄©ÿ±!");
      // Imperial Persian vs Hijri Zodiac and Gregorian French- vs English-derived months
      referenceKeys("footer", ["ŸÖŸáÿ± €≤€µ€∑€∏ ÿ¥ÿßŸáŸÜÿ¥ÿßŸá€å", "ÿ™€åÿ± €≤€µ€∏€∞ ÿ¥ÿßŸáŸÜÿ¥ÿßŸá€å", "ÿß⁄©ÿ™ÿ®ÿ±", "⁄òŸàÿ¶€åŸá"],
      ["ŸÖ€åÿ≤ÿßŸÜ €±€≥€π€∏ Ÿáÿ¨ÿ±€å", "ÿ≥ÿ±ÿ∑ÿßŸÜ €±€¥€∞€∞ Ÿáÿ¨ÿ±€å", "ÿß⁄©ÿ™Ÿàÿ®ÿ±", "ÿ¨ŸàŸÑÿß€å"]);
      referenceKeys("jsSuccess", ["ÿßÿ≥ÿ™ŸÅÿßÿØŸá", "ÿØÿßÿ±€åÿØ ŸÖ€å"], ["ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ", "ŸÖ€å"]);
      referenceKey("begin", "ÿßÿ≥ÿ™ŸÅÿßÿØŸá", "ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ");
      referenceKey("catInstruct", "ÿßÿ≥ÿ™ŸÅÿßÿØŸá", "ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ");
      referenceKey("dontWorry", "ÿßÿ≥ÿ™ŸÅÿßÿØŸá", "ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ");
      referenceKey("creditCathy", "ÿß€åÿØŸá", "ŸÅ⁄©ÿ±");
      referenceKey("selClass", "ÿß€åÿØŸá", "ŸÅ⁄©ÿ±");
      referenceKeys("pronunciation", ["Ÿáÿßÿ±€åÿ≥ ÿØÿßŸÑŸíŸà€å", "h…íÀê…æiÀês d…íÀêlviÀê"], ["ŸáŸéÿ±Ÿê€åÿ≥ ÿØŸéŸÑŸíŸàŸê€å", "ha…æiÀês dalwiÀê"]);
      referenceKey("ritvikCalc", "ÿ±€åÿ™Ÿà€å⁄© ÿ™€å⁄ØÿßŸàÿßÿ±ÿßŸæŸà", "ÿ±Ÿê€åÿ™ŸàŸê€å⁄© ÿ™Ÿê€å⁄ØŸéŸàŸéÿ±ŸéŸæŸà");
      referenceKey("ritvikHonor", "ÿ±€åÿ™Ÿà€å⁄© ÿ™€å⁄ØÿßŸàÿßÿ±ÿßŸæŸà", "ÿ±Ÿê€åÿ™ŸàŸê€å⁄© ÿ™Ÿê€å⁄ØŸéŸàŸéÿ±ŸéŸæŸà");
      referenceKey("rampalButton", "ÿØ⁄©ÿ™ÿ±", "ÿØÿß⁄©ÿ™ÿ±");
    }
  } else {
    document["dialect_fa"].style.display = "none";
  }
  if (lang == "sa") {
    document["script_sa"].style.display = "";
    dialect = document["script_sa"]["s_sa"].value; // really script, not dialect
    var keys = Object.keys(currentLangData);
    SANSKRIT_DIGITS = {
      "Deva": ["‡•¶", "‡•ß", "‡•®", "‡•©", "‡•™", "‡•´", "‡•¨", "‡•≠", "‡•Æ", "‡•Ø"],
      "Brah": ["ëÅ¶", "ëÅß", "ëÅ®", "ëÅ©", "ëÅ™", "ëÅ´", "ëÅ¨", "ëÅ≠", "ëÅÆ", "ëÅØ"],
      "Latn": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
      "Telu": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
      "Bali": ["·≠ê", "·≠ë", "·≠í", "·≠ì", "·≠î", "·≠ï", "·≠ñ", "·≠ó", "·≠ò", "·≠ô"],
      "Tibt": ["‡º†", "‡º°", "‡º¢", "‡º£", "‡º§", "‡º•", "‡º¶", "‡ºß", "‡º®", "‡º©"],
      "Khmr": ["·ü†", "·ü°", "·ü¢", "·ü£", "·ü§", "·ü•", "·ü¶", "·üß", "·ü®", "·ü©"],
      "Mlym": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    }[dialect];
    document.getElementById("script_sa_lipi").innerHTML = {
      "Deva": "‡§≤‡§ø‡§™‡§ø‡§É (Script) ",
      "Brah": "ëÄÆëÄ∫ëÄßëÄ∫ëÄÇ (Script) ",
      "Latn": "Script ",
      "Telu": "‡∞≤‡∞ø‡∞™‡∞ø‡∞É (Script) ",
      "Bali": "·¨Æ·¨∂·¨ß·¨∂·¨Ñ (Script) ",
      "Tibt": "‡Ω£‡Ω≤‡Ωî‡Ω≤‡Ωø (Script) ",
      "Khmr": "·ûõ·û∑·ûî·û∑·üá (Script) ",
      "Mlym": "‡¥≤‡¥ø‡¥™‡¥ø‡¥É (Script) "
    }[dialect];
    const TITLES = ["minExam", "semWithExam", "ritvikCalc", "ritvikHonor"];
    if (dialect == "Deva") {
      for (var k = 0; k < TITLES.length; k++)
        currentLangData[TITLES[k]] = "‡•• " + currentLangData[TITLES[k]] + " ‡••";
    } else if (dialect == "Latn") {
      var devanagari_consonants = ["‡§ï", "‡§ñ", "‡§ó", "‡§ò", "‡§ô", "‡§ö", "‡§õ", "‡§ú", "‡§ù", "‡§û",
        "‡§ü", "‡§†", "‡§°", "‡§¢", "‡§£", "‡§§", "‡§•", "‡§¶", "‡§ß", "‡§®",
        "‡§™", "‡§´", "‡§¨", "‡§≠", "‡§Æ", "‡§Ø", "‡§∞", "‡§≤", "‡§µ", "‡§∂", "‡§∑", "‡§∏", "‡§π", "‡§≥",
        "‡§É", "‡§Ç"];
      var devanagari_vowels = ["‡§Ö", "‡§Ü", "‡§á", "‡§à", "‡§â", "‡§ä", "‡§è", "‡§ê", "‡§ì", "‡§î", "‡§ã"];
      var devanagari_matras = ["‡§æ‡§Ç", "‡§æ‡§É", "‡§ø‡§Ç", "‡§ø‡§É", "‡•Ä‡§Ç", "‡•Ä‡§É", "‡•Å‡§Ç", "‡•Å‡§É", "‡•Ç‡§Ç", "‡•Ç‡§É", "‡•á‡§Ç", "‡•á‡§É", "‡•à‡§Ç", "‡•à‡§É", "‡•ã‡§Ç", "‡•ã‡§É", "‡•å‡§Ç", "‡•å‡§É",
        "‡•ç", "‡§æ", "‡§ø", "‡•Ä", "‡•Å", "‡•Ç", "‡•á", "‡•à", "‡•ã", "‡•å", "‡•É", "‡§Ç", "‡§É"];
      var iast_consonants = ["k", "kh", "g", "gh", "·πÖ", "c", "ch", "j", "jh", "√±",
        "·π≠", "·π≠h", "·∏ç", "·∏çh", "·πá", "t", "th", "d", "dh", "n",
        "p", "ph", "b", "bh", "m", "y", "r", "l", "v", "≈õ", "·π£", "s", "h", "·∏∑"];
      var iast_vowels = ["a", "ƒÅ", "i", "i", "u", "u", "e", "ai", "o", "au", "·πõ"];
      var iast_matras = ["ƒÅ·πÉ", "ƒÅ·∏•", "i·πÉ", "i·∏•", "ƒ´·πÉ", "ƒ´·∏•", "u·πÉ", "u·∏•", "≈´m", "≈´·∏•", "e·πÉ", "e·∏•", "ai·πÉ", "ai·∏•", "o·πÉ", "o·∏•", "au·πÉ", "au·∏•",
        "", "ƒÅ", "i", "ƒ´", "u", "≈´", "e", "ai", "o", "au", "·πõ", "a·πÉ", "a·∏•"];
      for (var k = 0; k < keys.length; k++) {
        if (["languages", "numbers"].indexOf(keys[k]) == -1) {
          for (var i = 0; i < devanagari_consonants.length; i++) {
            for (var j = 0; j < devanagari_matras.length; j++) {
              referenceKey(keys[k], devanagari_consonants[i]+devanagari_matras[j],
                iast_consonants[i]+iast_matras[j]);
            }
          }
          for (var i = 0; i < devanagari_vowels.length; i++) {
            referenceKey(keys[k], devanagari_vowels[i], iast_vowels[i]);
          }
          for (var i = 0; i < devanagari_consonants.length; i++) {
            referenceKey(keys[k], devanagari_consonants[i], iast_consonants[i]+"a");
          }
          for (var i = 0; i <= 9; i++) {
            referenceKey(keys[k], ["‡•¶", "‡•ß", "‡•®", "‡•©", "‡•™", "‡•´", "‡•¨", "‡•≠", "‡•Æ", "‡•Ø"][i], ""+i);
          }
          referenceKey(keys[k], "‡§Ω", "'");
          referenceKey(keys[k], "‡•§", "|");
          referenceKey(keys[k], "‡••", "||");
        }
      }
      for (var k = 0; k < TITLES.length; k++)
        currentLangData[TITLES[k]] = currentLangData[TITLES[k]].toUpperCase();
    } else {
      var devanagari_letters = ["‡§Ö", "‡§Ü", "‡§á", "‡§à", "‡§â", "‡§ä", "‡§è", "‡§ê", "‡§ì", "‡§î", "‡§ã",
        "‡•ç", "‡§æ", "‡§ø", "‡•Ä", "‡•Å", "‡•Ç", "‡•á", "‡•à", "‡•ã", "‡•å", "‡•É", "‡§Ç", "‡§É", "‡•§", "‡••", "‡§Ω",
        "‡§ï", "‡§ñ", "‡§ó", "‡§ò", "‡§ô", "‡§ö", "‡§õ", "‡§ú", "‡§ù", "‡§û",
        "‡§ü", "‡§†", "‡§°", "‡§¢", "‡§£", "‡§§", "‡§•", "‡§¶", "‡§ß", "‡§®",
        "‡§™", "‡§´", "‡§¨", "‡§≠", "‡§Æ", "‡§Ø", "‡§∞", "‡§≤", "‡§µ", "‡§∂", "‡§∑", "‡§∏", "‡§π", "‡§≥",
        "‡•¶", "‡•ß", "‡•®", "‡•©", "‡•™", "‡•´", "‡•¨", "‡•≠", "‡•Æ", "‡•Ø", " "];
      var new_letters = SANSKRIT_LETTER_MAP[dialect];
      var numberSep = {"Brah": "", "Telu": "", "Bali": "·≠û", "Tibt": " ", "Khmr": " ", "Mlym": ""}[dialect];
      var TITLE_START = {"Brah": "ëÅà ", "Telu": "‡•• ", "Bali": "·≠ö", "Tibt": "‡ºÑ‡ºé", "Khmr": "·üô", "Mlym": "‡•• "}[dialect];
      var TITLE_END = {"Brah": " ëÅà", "Telu": " ‡••", "Bali": "", "Tibt": "", "Khmr": "", "Mlym": " ‡••"}[dialect];
      for (var k = 0; k < keys.length; k++) {
        if (["languages", "numbers"].indexOf(keys[k]) == -1) {
          if (["Bali", "Tibt"].indexOf(dialect) != -1) {
            referenceKey(keys[k], "&nbsp;‡•§", "‡•§");
            referenceKey(keys[k], "&nbsp;‡••", "‡••");
          }
          if (["Khmr"].indexOf(dialect) != -1) {
            referenceKey(keys[k], "‡•§ ", "‡•§&nbsp;");
            referenceKey(keys[k], "‡•• ", "‡••&nbsp;");
          }
          for (var i = 0; i < devanagari_letters.length; i++)
            referenceKey(keys[k], devanagari_letters[i], new_letters[i]);
          for (var i = 0; i < currentLangData[keys[k]].length; i++) {
            if (SANSKRIT_DIGITS.concat("%").indexOf(currentLangData[keys[k]].substring(i,i+1)) != -1) {
              if (i == currentLangData[keys[k]].length ||
              SANSKRIT_DIGITS.concat([".","%"]).indexOf(currentLangData[keys[k]].substring(i+1,i+2)) == -1) {
                currentLangData[keys[k]] = currentLangData[keys[k]].substring(0,i+1) + numberSep +
                currentLangData[keys[k]].substring(i+1);
                i += numberSep.length;
              }
              if (i == 0 || SANSKRIT_DIGITS.concat([".","%"]).indexOf(currentLangData[keys[k]].substring(i-1,i)) == -1) {
                currentLangData[keys[k]] = currentLangData[keys[k]].substring(0,i) + numberSep +
                currentLangData[keys[k]].substring(i);
                i += numberSep.length;
              }
            }
          }
          referenceKey(keys[k], "$NUMBER", numberSep+"$NUMBER"+numberSep);
          referenceKey(keys[k], numberSep+"$NUMBER"+numberSep+"%", numberSep+"$NUMBER%"+numberSep);
          referenceKey(keys[k], "$SCORE%", numberSep+"$SCORE%"+numberSep);
          referenceKey(keys[k], "$MIN%", numberSep+"$MIN%"+numberSep);
          referenceKey(keys[k], "$WEIGHT%", numberSep+"$WEIGHT%"+numberSep);
          referenceKey(keys[k], "$PTS/$TOT", numberSep+"$PTS/$TOT"+numberSep);
          referenceKey(keys[k], "AHS&#8203;GPA", "AHS GPA");
          if (dialect == "Bali") {
            referenceKey(keys[k], "·≠û&#8203;", "·≠û ");
            referenceKey(keys[k], "·≠ü&#8203;", "·≠ü ");
          }
          if (dialect == "Tibt") {
            referenceKey(keys[k], "‡ΩÑ‡ºç", "‡ΩÑ‡ºå‡ºç");
            referenceKey(keys[k], "‡ΩÑ‡ºé", "‡ΩÑ‡ºå‡ºé");
            referenceKey(keys[k], "‡ΩÄ‡ºç", "‡ΩÄ&nbsp;‡ºç");
            referenceKey(keys[k], "‡ΩÄ‡ºé", "‡ΩÄ&nbsp;‡ºé");
            referenceKey(keys[k], "‡ΩÇ‡ºç", "‡ΩÇ&nbsp;‡ºç");
            referenceKey(keys[k], "‡ΩÇ‡ºé", "‡ΩÇ&nbsp;‡ºé");
            referenceKey(keys[k], "‡ºç&#8203;", "‡ºç&ensp;");
            referenceKey(keys[k], "‡ºé&#8203;", "‡ºé&ensp;");
            for (var i = 0xF40; i <= 0xF67; i++)
              referenceKey(keys[k], "‡æÑ"+String.fromCharCode(i), String.fromCharCode(i+0x50))
          }
          if (dialect == "Khmr") {
            referenceKeys(keys[k], ["·üí&#8203;", "·üí&nbsp;"], ["·üë&#8203;", "·üë&nbsp;"]);
            if (currentLangData[keys[k]].endsWith("·üí")) {
              currentLangData[keys[k]] = currentLangData[keys[k]].substring(0,
              currentLangData[keys[k]].length-1) + "·üë";
            }
          }
          if (dialect == "Mlym") {
            referenceKeys(keys[k], ["‡¥£‡µç ", "‡¥£‡µç&nbsp"], ["‡µ∫ ", "‡µ∫&nbsp;"]);
            referenceKeys(keys[k], ["‡¥®‡µç ", "‡¥®‡µç&nbsp"], ["‡µª ", "‡µª&nbsp;"]);
            referenceKeys(keys[k], ["‡¥≤‡µç ", "‡¥≤‡µç&nbsp"], ["‡µΩ ", "‡µΩ&nbsp;"]);
            referenceKeys(keys[k], ["‡¥≥‡µç ", "‡¥≥‡µç&nbsp"], ["‡µæ ", "‡µæ&nbsp;"]);
            referenceKeys(keys[k], ["‡¥ï‡µç ", "‡¥ï‡µç&nbsp"], ["‡µø ", "‡µø&nbsp;"]);
          }
        }
      }
      for (var k = 0; k < TITLES.length; k++)
        currentLangData[TITLES[k]] = TITLE_START + currentLangData[TITLES[k]] + TITLE_END;
      referenceKey("confirm", "&#8203;", "‚Äã"); // unicode zero width space in quotes
      referenceKey("pronunciation", "…æ…™s&#8203;d", "…æ…™s d");
      referenceKey("pronunciation", "…æ…™sÃ™&#8203;ÀàdÃ™", "…æ…™sÃ™ ÀàdÃ™");
      referenceKey("rampalInstruct", "Count&#8203;as", "Count as");
    }
    currentLangData["languages"] = [];
    for (var k = 0; k < LANG_CODES.length; k++)
      currentLangData["languages"].push(currentLangData["l_"+LANG_CODES[k]]);
  } else {
    document["script_sa"].style.display = "none";
  }
  return dialect;
}
function wordList(arr) {
  var str = "";
  var comma = ", ";
  var oxford = true;
  if (arr.length == 0) return str;
  if (arr.length == 1) return arr[0];
  if (RTL_LANG.indexOf(lang) != -1)
    comma = "&rlm;ÿå ";
  if (["es", "pt", "fr"].indexOf(lang) != -1)
    oxford = false;
  for (var i = 0; i < arr.length-2; i++)
    str += arr[i] + comma;
  str += arr[arr.length-2];
  if (oxford && arr.length > 2)
    str += comma;
  else
    str += " "
  if (lang != "sa")
    str += currentLangData.and;
  if (lang == "es" && arr[arr.length-1].toLowerCase().startsWith("i"))
    str = str.substring(0, str.length-1)+"e";
  str += " ";
  str += arr[arr.length-1];
  if (lang == "sa")
    str += " " + currentLangData.and;
  return str;
}